Juraj Kardos, 2014.
Implementation of GA for approximation of noisy data by 3rd order polynomial function.

Noisy data are generated by given polynomial function
defined in file generator.c and adding small noise. Data
are located in file input.txt. Format of file is couple
x and f'(x) on each line, where f'(x) is noisy polynomial
function we want to approximate. 
Usage: $./generator N, where N is number of generated data
points.

GA consists of three different impmlementations:
1) CPU serial code
2) GPU accelerated code
3) MPI code using multiple GPUs

Exact solution, i.e. generating polynomial function f(x) without noise has 
these parameters:
$ cat solution.txt 
c0 = -5;
c1 = 3;
c2 = 4;
c3 = -2;

Ad 1)
$ ./cpu input.txt 
Reading file - success!
------------------------------------------------------------
Finished! Found Solution:
	c0 = -4.78963
	c1 = 2.92177
	c2 = 3.53095
	c3 = -1.72443
Best fitness: 4.30823
Generations: 1500
Time for CPU calculation equals 35.92 seconds

Ad 2.)
$ ./gpu input.txt 
Reading file - success!
------------------------------------------------------------
Finished! Found Solution:
	c0 = -5.00632
	c1 = 2.97784
	c2 = 4.04255
	c3 = -2.00148
Best fitness: 1.91559
Generations: 1500
Time for GPU calculation equals 1.92 seconds

Ad 3.)
$ mpirun -np 3 ./mpi input.txt
Reading file - success!
Reading file - success!
Reading file - success!
Rank: 2
Best fitness: 2.48737
Generations: 1500
Time for GPU calculation equals 1.9 seconds
Rank: 1
Best fitness: 3.09135
Generations: 1500
Time for GPU calculation equals 1.89 seconds
Rank: 0
Best fitness: 3.12019
Generations: 1500
Time for GPU calculation equals 2.26 seconds
------------------------------------------------------------
Finished! Found Solution at process 2: 
	c0 = -4.89853
	c1 = 2.88693
	c2 = 3.8161
	c3 = -1.8629
Best fitness: 2.48737
Generations: 1500
Time for GPU calculation equals 1.9 seconds


Fitness is squared sum of difference between approximation function g(x) and
noisy data points. The lower fitness the better approximation.
Fitness = sum for 1..N(sqr(g(x_i)-f'(x_i)))

